services:
  postgres:
    image: postgres:18
    container_name: lodger_db
    environment:
      POSTGRES_DB: lodger_management
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${DB_PASSWORD:-changeme123}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
      PGPORT: 5433
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
    ports:
      - "5433:5433"
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "PGPASSWORD=${DB_PASSWORD:-changeme123} pg_isready -U postgres -d lodger_management -p 5433"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 300s
    networks:
      - lodger_network

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: lodger_backend
    environment:
      NODE_ENV: production
      PORT: 3003
      DB_HOST: postgres
      DB_PORT: 5433
      DB_NAME: lodger_management
      DB_USER: postgres
      DB_PASSWORD: ${DB_PASSWORD:-changeme123}
      JWT_SECRET: ${JWT_SECRET:-your_super_secret_jwt_key_here_minimum_32_characters_long}
      FRONTEND_URL: ${FRONTEND_URL:-http://localhost:3000}
    volumes:
      - uploads_data:/app/uploads
      - backups_data:/app/backups
    ports:
      - "${BACKEND_PORT:-3003}:3003"
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3003/api/setup/status"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 80s
    networks:
      - lodger_network

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: lodger_frontend
    environment:
      REACT_APP_API_URL: "/api"
    ports:
      - "${FRONTEND_PORT:-3000}:80"
    restart: unless-stopped
    depends_on:
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - lodger_network

  nginx:
    image: nginx:alpine
    container_name: lodger_nginx
    ports:
      - "${HTTP_PORT:-80}:80"
      - "${HTTPS_PORT:-443}:443"
    configs:
      - source: nginx_config
        target: /etc/nginx/conf.d/default.conf
    depends_on:
      - frontend
      - backend
    restart: unless-stopped
    networks:
      - lodger_network

volumes:
  postgres_data_prod:
  uploads_data:
  backups_data:

configs:
  nginx_config:
    content: |
      upstream backend {
          server backend:3003;
      }

      upstream frontend {
          server frontend:80;
      }

      server {
          listen 80;
          server_name localhost;

          location / {
              proxy_pass http://frontend;
              proxy_set_header Host $$host;
              proxy_set_header X-Real-IP $$remote_addr;
              proxy_set_header X-Forwarded-For $$proxy_add_x_forwarded_for;
              proxy_set_header X-Forwarded-Proto $$scheme;
          }

          location /api {
              proxy_pass http://backend;
              proxy_set_header Host $$host;
              proxy_set_header X-Real-IP $$remote_addr;
              proxy_set_header X-Forwarded-For $$proxy_add_x_forwarded_for;
              proxy_set_header X-Forwarded-Proto $$scheme;
          }

          location /uploads {
              proxy_pass http://backend/uploads;
              proxy_set_header Host $$host;
              proxy_set_header X-Real-IP $$remote_addr;
          }
      }

networks:
  lodger_network:
    driver: bridge
    name: lodger_prod_network